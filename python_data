1、python六大数据类型：
  （1）三个可变数据类型：List、Set、Dictionary
    解释：变量所指向的内存地址处的值可以改变。
    举例：x=y=[1,2]，id(x)=2429731548808,id(y)=2429731524424。两次赋值在内存中相当于新建两个对象，因此对于可变类型，具有同样值的对象是不同的对象，
      他们彼此是独立的。值的变化并不会引起新建对象，即地址是不会变的
      x.append('a'), id(x)=2429731548808, id(y)=2429731524424
      del x[1], id(x)=2429731548808, id(y)=2429731524424
      
  （2）三个不可变数据类型：string、Tuple、number（int、float、bool、complex复数）
    解释：变量所指向的内存地址处的值不可以改变。python中一切皆object，任何变量都是对象的引用。
    举例：取整数18（内存地址在1409838640），整数19（内存地址在1409838672)。x=y=18, 则有id(18)=id(x)=id(y)=1409838640;
        此时再次定义x=19，那么id(19)=id(x)=1409838672，但是18的内存地址不变（y不变），x为新对象19的引用。无论定义多少个变量，
        内存地址都是一样的，但是引用计数会增加，且当所有变量都不指向18后，18就会被内存回收机制回收。元组是特例，地址可能变。
  （3）举例：
    1: 
    >>> x = y = z = 1
    >>> x = 2
    result: x = 2, y = 1, z = 1
    解释：不可变数据类型int，x、y、z引用同一个1的物理地址，物理地址的值不能改变，后来x改为引用2的物理地址
    2:
    >>> x = y = z = [1, 2, 3]
    >>> x.append('a')
    result: x = [1, 2, 3, 'a'], y = [1, 2, 3, 'a'], z = [1, 2, 3, 'a']
    解释：可变数据类型list，x、y、z引用同一个物理地址，在此物理地址上的值改变了，x、y、z仍然引用该地址
    
    
2、python常用4中数据类型List、Tuple、Dictionary和Set
  （1）List数组。可存多种类型，可多层嵌套数组，如[1, 'a', [1, 2]]。
      用法：使用下标访问，用方括号截取字符，用for循环遍历
      举例：
      1: list[1:]，从第二个元素输出到最后一个
      2: for item in list: ... | for i, item in enumerate(list): ..., 需要使用下标就用enumerate
      3: 基本用法：
        增：list.append('a')，加到最后 ｜ list.insert(index, 'a')
        删：list.remove('a')，删除第一个'a' ｜ list.pop(index)，无index默认最后一个 ｜ del list[index]
        more: >>> help(list)
